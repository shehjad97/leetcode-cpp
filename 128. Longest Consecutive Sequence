class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        set<int> s(nums.begin(), nums.end());
        stack<int> stk;
        stk.push(INT_MIN);

        int count = 0;
        int ans = 0;

        for (int x: s) {
            if (x != stk.top() + 1) count = 1;
            else count++;
            if (ans < count) ans = count;
            stk.push(x);
        }

        return ans;
    }
};

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        sort(nums.begin(), nums.end());

        int longestSeq = 1;
        int seq = 1;

        if (!nums.size()) return 0;
        if (nums.size() == 1) return 1;

        for (int i = 0; i < nums.size() - 1; i++) {
            if (nums[i] == nums[i+1]) continue;
            if (nums[i] + 1 == nums[i+1]) seq++;
            else seq = 1;

            cout << nums[i] << endl;

            if (longestSeq < seq) longestSeq = seq;
        }

        return longestSeq;
    }
};
