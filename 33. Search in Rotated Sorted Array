class Solution {
public:
    int binarySearch(const vector<int>& nums, int target) {
        int left = 0;
        int right = nums.size() - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) return mid;
            if (nums[mid] < target) left = mid + 1;
            else right = mid - 1;
        }
        return -1;
    }

    int search(vector<int>& nums, int target) {
        int min_idx = min_element(nums.begin(), nums.end()) - nums.begin();
        int rotated = nums.size() - min_idx;

        vector<int> v1(nums.begin(), nums.begin() + min_idx);
        vector<int> v2(nums.begin() + min_idx, nums.end());

        for (int x: v1) cout << x << endl;
        for (int x: v2) cout << x << endl;

        int ans1 = binarySearch(v1, target);
        int ans2 = binarySearch(v2, target);

        if (ans1 == ans2) return -1;
        else if (ans2 == -1) return ans1;
        else return v1.size() + ans2;
    }
};
